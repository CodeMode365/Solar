import React, { useRef, forwardRef } from "react";
import * as THREE from "three";
import { Canvas, useFrame } from "@react-three/fiber";
import {
  Sphere,
  OrbitControls,
  Stars,
  Cloud,
  RandomizedLight,
  Sky,
  CameraShake,
  Bounds,
  useBounds,
  Ring,
  Environment,
  PivotControls,
  QuadraticBezierLine,
  useGLTF,
  Float,
} from "@react-three/drei";

import { useHelper } from "@react-three/drei/core";
import { PointLightHelper } from "three";

// const Helper = () => {
//   const light = useRef(null);
//   useHelper(light, directionalLightHelper);
//   return <directionalLight intensity={1} ref={light} />;
// };

const config = {
  maxYaw: 0.1, // Max amount camera can yaw in either direction
  maxPitch: 0.1, // Max amount camera can pitch in either direction
  maxRoll: 0.1, // Max amount camera can roll in either direction
  yawFrequency: 0.1, // Frequency of the the yaw rotation
  pitchFrequency: 0.1, // Frequency of the pitch rotation
  rollFrequency: 0.1, // Frequency of the roll rotation
  intensity: 1, // initial intensity of the shake
  decay: true, // should the intensity decay over time
  decayRate: 0.65, // if decay = true this is the rate at which intensity will reduce at
  controls: undefined, // if using orbit controls, pass a ref here so we can update the rotation
};

// Auto-generated by: https://github.com/pmndrs/gltfjsx
const Spaceman = forwardRef(({ children, ...props }, ref) => {
  const { nodes, materials } = useGLTF("/Astronaut-transformed.glb");
  useLayoutEffect(() => {
    Object.values(materials).forEach((material) => {
      material.roughness = 0;
    });
  }, []);
  return (
    <mesh
      castShadow
      receiveShadow
      ref={ref}
      {...props}
      geometry={nodes.Astronaut_mesh.geometry}
      material={materials.Astronaut_mat}
      material-envMapIntensity={0}
      dispose={null}
    >
      {children}
    </mesh>
  );
});

// One-click copy/paste from the poimandres market: https://market.pmnd.rs/model/low-poly-spaceship
const Ship = forwardRef((props, ref) => {
  const { nodes, materials } = useGLTF(
    `/modal.gltf` ||
      "https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/low-poly-spaceship/model.gltf"
  );
  useLayoutEffect(() => {
    Object.values(materials).forEach((material) => {
      material.roughness = 0;
    });
  }, []);
  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005.geometry}
        material={materials.Mat0}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_1.geometry}
        material={materials.Mat1}
        material-color="black"
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_2.geometry}
        material={materials.Mat2}
        material-envMapIntensity={0.2}
        material-color="black"
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_3.geometry}
        material={materials.Window_Frame}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_4.geometry}
        material={materials.Mat4}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_6.geometry}
        material={materials.Window}
      />
    </group>
  );
});

function Cable({
  start,
  end,
  v1 = new THREE.Vector3(),
  v2 = new THREE.Vector3(),
}) {
  const ref = useRef();
  useFrame(
    () =>
      ref.current.setPoints(
        start.current.getWorldPosition(v1),
        end.current.getWorldPosition(v2)
      ),
    []
  );
  return <QuadraticBezierLine ref={ref} lineWidth={3} color="#ff2060" />;
}

const App = () => {
  // useHelper(light, PointLightHelper);
  const [day, setDay] = React.useState(false);
  const [shake, setShake] = React.useState(true);
  const spaceman = useRef();
  const ship = useRef();
  return (
    <>
      <button
        style={{
          position: "absolute",
          top: 15,
          left: 15,
          width: "90px",
          height: "30px",
          borderRadius: "20px",
          background: "red",
          zIndex: 100,
          color: "white",
          border: "none",
          backgroundImage: "linear-gradient(30deg,red,blue)",
          cursor: "pointer",
        }}
        onClick={() => setDay(!day)}
      >
        {day ? "Day view" : "Night view"}
      </button>
      <button
        style={{
          position: "absolute",
          top: 15,
          left: 125,
          width: "70px",
          height: "30px",
          borderRadius: "20px",
          background: "red",
          zIndex: 101,
          color: "white",
          border: "none",
          backgroundImage: "linear-gradient(30deg,red,blue)",
          cursor: "pointer",
        }}
        onClick={() => setShake(!shake)}
      >
        {shake ? "Shake" : "Move Around"}
      </button>
      <Canvas
        camera={{
          position: [-2, 10, 0],
          fov: 75,
          far: 1000,
          near: 0.1,
          rotation: ["100deg", "40deg", 0],
        }}
        style={{ width: "100vw", height: "100vh", background: "#111" }}
      >
        {/* <Helper /> */}
        {/* <Sphere>
        <meshStandardMaterial color="#d0a0cd" />
      </Sphere> */}
        <Stars
          radius={100}
          depth={50}
          factor={4}
          //  fade
          speed={2}
        />
        <Ring position={[0, 0, 0]} raidus={5} color="red" />
        {shake && <CameraShake {...config} />}
        <Bounds fit clip observe margin={1.2}>
          <SelectToZoom>
            <directionalLight intensity={1} position={[0, 4, 5]} />
            <directionalLight intensity={1} position={[0, 4, -5]} />
            <mesh>
              <sphereGeometry attach="geometry" position={[0, 0, 0]} />
              <meshStandardMaterial
                attach="material"
                opacity={0.7}
                color="red"
              />
            </mesh>
            <mesh position={[-5, -4, -2]}>
              {/* <directionalLight intensity={1} position={[0, -5, 0]} /> */}
              <sphereGeometry attach="geometry" />
              <meshStandardMaterial
                attach="material"
                opacity={0.7}
                color="yellow"
              />
            </mesh>
            <mesh position={[5, 3, -2]}>
              {/* <directionalLight intensity={1} position={[0, -5, 0]} /> */}
              <sphereGeometry attach="geometry" />
              <meshStandardMaterial
                attach="material"
                opacity={0.7}
                color="green"
              />
            </mesh>
          </SelectToZoom>
        </Bounds>
        {day && (
          <Sky
            distance={450}
            sunPosition={[0, 1, 0]}
            inclination={0}
            azimuth={0.25}
            // {...props}
          />
        )}
        <group>
          <Cloud
            opacity={0.5}
            speed={0.4}
            width={50}
            depth={1.5}
            segments={20}
            color="#dc89aa"
          />{" "}
          <Cloud
            opacity={0.5}
            speed={0.4}
            width={30}
            depth={1.5}
            segments={20}
            color="#7cf9aa"
          />
          <Cloud
            opacity={0.5}
            speed={0.4}
            width={10}
            depth={1.5}
            segments={20}
            color="#acbffa"
          />
        </group>
        {/* <RandomizedLight frames={1} color={["green", "blue", "yellow"]} /> */}
        {/* <OrbitControls /> */}

        <OrbitControls
          makeDefault
          minPolarAngle={0}
          maxPolarAngle={Math.PI / 1.75}
        />
      </Canvas>

      <Float scale={0.75} position={[0, 0.65, 0]} rotation={[0, 0.6, 0]}>
        <PivotControls
          anchor={[0, 0.7, 0.09]}
          depthTest={true}
          scale={0.5}
          lineWidth={2}
        >
          <Ship ref={ship} />
        </PivotControls>
      </Float>

      <Float
        position={[1, 1.1, -0.5]}
        rotation={[Math.PI / 3.5, 0, 0]}
        rotationIntensity={4}
        floatIntensity={6}
        speed={1.5}
      >
        <Spaceman scale={0.2}>
          <object3D position={[-0.6, 2, 0]} ref={spaceman} />
        </Spaceman>
      </Float>
      <Cable start={ship} end={spaceman} />
    </>
  );
};

// This component wraps children in a group with a click handler
// Clicking any object will refresh and fit bounds
function SelectToZoom({ children }) {
  const api = useBounds();
  return (
    <group
      onClick={(e) => (
        e.stopPropagation(), e.delta <= 2 && api.refresh(e.object).fit()
      )}
      onPointerMissed={(e) => e.button === 0 && api.refresh().fit()}
    >
      {children}
    </group>
  );
}
export default App;
